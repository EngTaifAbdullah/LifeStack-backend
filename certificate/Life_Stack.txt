BACKEND

(( settings.py ))


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)dzlcl#bko47y-dl-f644+*q%(5&hiqyza)!xi4ta_#c%2(g_j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LifeStack.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LifeStack.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'LifeStack',  # Name of your PostgreSQL database
        'USER': 'postgres',
        'PASSWORD': 'TA123456at',
        'HOST': 'localhost',  
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

==================================================================================================================


(( modeles.py ))

from django.db import models
from django.contrib.auth.models import User


# ______________________________________________________________________________________________________________

# Add Category like: Task | Cource | Exam

class Category(models.Model):
    category_type = models.CharField(max_length=100)

    def __str__(self):
        return self.category_type
    
# ______________________________________________________________________________________________________________

# when you want to uplode your Certificate this is the fields you need to fill out.

class Certificate(models.Model):

    title = models.CharField(max_length=200)
    organization = models.CharField(max_length=200)
    date_obtained = models.DateField()
    file = models.FileField(upload_to='certificates/')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='certificates')

    def __str__(self):
        return f"{self.title} - {self.organization}"
    
# ______________________________________________________________________________________________________________


class Course(models.Model):

    title = models.CharField(max_length=200)
    provider = models.CharField(max_length=200)
    description = models.TextField(blank=True, null=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='courses')
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, related_name='courses')

    def __str__(self):
        return f"{self.title} - {self.provider}"
    


# ______________________________________________________________________________________________________________

# Personal doucument such as: ID | Pasport | Resume

class PersonalDocument(models.Model):

    title = models.CharField(max_length=200)
    file = models.FileField(upload_to='personal_docs/')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='personal_docs')

    def __str__(self):
        return self.title
    
# ______________________________________________________________________________________________________________


=============================================================================================


(( view.py ))


from rest_framework.views import APIView
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from rest_framework import status
from .models import Certificate, Course, PersonalDocument
from .serializers import CertificateSerializer, CourseSerializer, PersonalDocumentSerializer

# __________________________________________________________________________________________________________________________

class Home(APIView):
    
    def get(self, request):
        return Response({"message": "Welcome to LifeStack App üçìüå∫ "})


    def post(self, request):
        data = request.data
        return Response({
            "message": "You just posted to LifeStack",
            "data": data
        })
# __________________________________________________________________________________________________________________________


# Certificates CRUD (( Read | Create ))

class CertificatesIndex(APIView):

    def get(self, request):  # Read All certificates List

        queryset = Certificate.objects.all()
        serializer = CertificateSerializer(queryset, many=True)
        return Response(serializer.data)



    def post(self, request):  # Create new certificate

        serializer = CertificateSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()

            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
# ____________________________________

# Certificates CRUD (( Read | Update | Delete ))

class CertificateDetail(APIView):

    def get(self, request, cert_id):  # Read spesifice certificates

        certificate = get_object_or_404(Certificate, id=cert_id)
        serializer = CertificateSerializer(certificate)
        return Response(serializer.data)



    def put(self, request, cert_id):  # Update spesifice certificates

        certificate = get_object_or_404(Certificate, id=cert_id)
        serializer = CertificateSerializer(certificate, data=request.data)
        if serializer.is_valid():
            serializer.save()

            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



    def delete(self, request, cert_id):  # Delete spesifice certificates
        
        certificate = get_object_or_404(Certificate, id=cert_id)
        certificate.delete()

        return Response({"message": f"Certificate {cert_id} deleted Successfully"}, status=status.HTTP_204_NO_CONTENT)

# __________________________________________________________________________________________________________________________

# Courses CRUD (( Read | Create ))

class CoursesIndex(APIView):

    def get(self, request):  # Read All Courses List

        queryset = Course.objects.all()
        serializer = CourseSerializer(queryset, many=True)
        return Response(serializer.data)



    def post(self, request): # Create new Courses

        serializer = CourseSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()

            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
# ____________________________________

# Courses CRUD (( Read | Update | Delete ))

class CourseDetail(APIView):   

    def get(self, request, course_id):  # Read spesifice course

        course = get_object_or_404(Course, id=course_id)
        serializer = CourseSerializer(course)
        return Response(serializer.data)



    def put(self, request, course_id):  # Update spesifice course

        course = get_object_or_404(Course, id=course_id)
        serializer = CourseSerializer(course, data=request.data)
        if serializer.is_valid():
            serializer.save()

            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

 

    def delete(self, request, course_id):  # Delete spesifice course

        course = get_object_or_404(Course, id=course_id)
        course.delete()
        return Response({"message": f"Course {course_id} deleted Successfully"}, status=status.HTTP_204_NO_CONTENT)

# __________________________________________________________________________________________________________________________

# Personal Document CRUD (( Read | Create ))

class PersonalDocsIndex(APIView):

    def get(self, request):  # Read All Personal Documents List

        queryset = PersonalDocument.objects.all()
        serializer = PersonalDocumentSerializer(queryset, many=True)
        return Response(serializer.data)
    


    def post(self, request):  # Create new Personal Document

        serializer = PersonalDocumentSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()

            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
# ____________________________________

# Personal Document CRUD (( Read | Update | Delete ))

class PersonalDocDetail(APIView):

    def get(self, request, doc_id):  # Read spesifice Personal Document

        doc = get_object_or_404(PersonalDocument, id=doc_id)
        serializer = PersonalDocumentSerializer(doc)
        return Response(serializer.data)



    def put(self, request, doc_id):  # Update spesifice Personal Document

        doc = get_object_or_404(PersonalDocument, id=doc_id)
        serializer = PersonalDocumentSerializer(doc, data=request.data)
        if serializer.is_valid():
            serializer.save()
            
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    

    def delete(self, request, doc_id):  # Delete spesifice Personal Document

        doc = get_object_or_404(PersonalDocument, id=doc_id)
        doc.delete()
        return Response({"message": f"Document {doc_id} deleted Successfully"}, status=status.HTTP_204_NO_CONTENT)

# __________________________________________________________________________________________________________________________



===================================================================================

(( serializers.py ))

from rest_framework import serializers
from .models import Category, Certificate, Course, PersonalDocument

# _________________________________________________________

class CategorySerializer(serializers.ModelSerializer):

    class Meta:
        model = Category
        fields = '__all__'

# _________________________________________________________

class CertificateSerializer(serializers.ModelSerializer):

    class Meta:
        model = Certificate
        fields = '__all__'

# _________________________________________________________

class CourseSerializer(serializers.ModelSerializer):

    class Meta:
        model = Course
        fields = '__all__'

# _________________________________________________________

class PersonalDocumentSerializer(serializers.ModelSerializer):
    class Meta:
        model = PersonalDocument
        fields = '__all__'

# _________________________________________________________


=======================================================================

(( main_app/urls.py ))

from django.urls import path
from .views import Home

urlpatterns = [
    path('', Home.as_view(), name='home'),
]
=========================================================================

